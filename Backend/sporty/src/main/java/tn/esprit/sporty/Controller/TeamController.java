package tn.esprit.sporty.Controller;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j; // ‚úÖ Ajout pour le logging
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import tn.esprit.sporty.Entity.Role;
import tn.esprit.sporty.Entity.Team;
import tn.esprit.sporty.Entity.User;
import tn.esprit.sporty.Repository.UserRepository;
import tn.esprit.sporty.Service.IteamService;

import java.util.List;
import java.util.Map;
import java.util.Optional;

@CrossOrigin( "*")
@RestController
@RequestMapping("/RestTeam")
@RequiredArgsConstructor
@Slf4j // ‚úÖ Ajout du logger
public class TeamController {

    private final IteamService teamService;
    private final UserRepository userRepository;

    // ‚úÖ R√©cup√©rer toutes les √©quipes
    @GetMapping("/getAll")
    public ResponseEntity<List<Team>> getAllTeams() {
        List<Team> teams = teamService.getAllTeams();
        log.info("üìå Chargement de toutes les √©quipes. Nombre total : {}", teams.size());
        return ResponseEntity.ok(teams);
    }

    // ‚úÖ R√©cup√©rer une √©quipe par ID
    @GetMapping("/{id}")
    public ResponseEntity<Team> getTeamById(@PathVariable int id) {
        Optional<Team> team = teamService.getTeamById(id);
        if (team.isPresent()) {
            log.info("üîç √âquipe trouv√©e : {}", team.get().getTeamName());
            return ResponseEntity.ok(team.get());
        } else {
            log.warn("‚ùå √âquipe ID={} introuvable", id);
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
        }
    }

    // ‚úÖ Ajouter une √©quipe
    @PostMapping("/addteam")
    public ResponseEntity<Team> createTeam(@RequestBody Team team) {
        log.info("üì• Nouvelle √©quipe re√ßue : {}", team.getTeamName());
        Team savedTeam = teamService.createTeam(team);
        return ResponseEntity.status(HttpStatus.CREATED).body(savedTeam);
    }

    // ‚úÖ Mettre √† jour une √©quipe
    @PutMapping("/{id}")
    public ResponseEntity<Team> updateTeam(@PathVariable int id, @RequestBody Team team) {
        Team updatedTeam = teamService.updateTeam(id, team);
        if (updatedTeam != null) {
            log.info("‚úÖ √âquipe ID={} mise √† jour avec succ√®s.", id);
            return ResponseEntity.ok(updatedTeam);
        } else {
            log.warn("‚ùå √âquipe ID={} introuvable.", id);
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
        }
    }

    // ‚úÖ Supprimer une √©quipe


    // ‚úÖ Ajouter un joueur √† une √©quipe
    @PutMapping("/{teamId}/addPlayer")
    public ResponseEntity<?> addPlayerToTeam(@PathVariable int teamId, @RequestBody Map<String, Integer> payload) {
        if (!payload.containsKey("playerId")) {
            return ResponseEntity.badRequest().body("‚ùå Erreur : `playerId` est requis !");
        }

        int playerId = payload.get("playerId");
        Optional<Team> teamOpt = teamService.getTeamById(teamId);
        Optional<User> playerOpt = userRepository.findById(playerId);

        if (teamOpt.isEmpty() || playerOpt.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("‚ùå √âquipe ou joueur introuvable !");
        }

        Team team = teamOpt.get();
        User player = playerOpt.get();

        // üö® V√©rifier si le joueur est d√©j√† dans une autre √©quipe
        if (player.getTeam() != null && player.getTeam().getTeamId() != teamId) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body("‚ö†Ô∏è Ce joueur est d√©j√† dans une autre √©quipe !");
        }

        team.getPlayers().add(player);
        player.setTeam(team);
        userRepository.save(player);  // üî• Mettre √† jour l'utilisateur
        teamService.updateTeam(teamId, team);

        log.info("‚úÖ Joueur ID={} ajout√© √† l'√©quipe ID={}", playerId, teamId);
        return ResponseEntity.ok(team);
    }



    // ‚úÖ Affecter un coach √† une √©quipe
    @PutMapping("/{teamId}/setCoach")
    public ResponseEntity<String> setCoach(@PathVariable int teamId, @RequestBody Map<String, Integer> payload) {
        if (!payload.containsKey("userId")) {
            return ResponseEntity.badRequest().body("‚ùå Erreur : `userId` est requis !");
        }

        int coachId = payload.get("userId");
        Optional<Team> teamOpt = teamService.getTeamById(teamId);
        Optional<User> coachOpt = userRepository.findById(coachId);

        if (teamOpt.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("‚ùå √âquipe introuvable !");
        }
        if (coachOpt.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("‚ùå Coach introuvable !");
        }

        Team team = teamOpt.get();
        User coach = coachOpt.get();

        if (coach.getRole() != Role.COACH) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body("‚ö†Ô∏è L'utilisateur s√©lectionn√© n'est pas un coach !");
        }

        // üö® V√©rifier si ce coach est d√©j√† assign√© √† une autre √©quipe
        List<Team> allTeams = teamService.getAllTeams();
        for (Team t : allTeams) {
            if (t.getCoach() != null && t.getCoach().getId() == coachId && t.getTeamId() != teamId) {
                return ResponseEntity.status(HttpStatus.CONFLICT).body("‚ö†Ô∏è Ce coach est d√©j√† affect√© √† une autre √©quipe !");
            }
        }

        // ‚úÖ Affectation du coach
        team.setCoach(coach);
        teamService.updateTeam(teamId, team);

        return ResponseEntity.ok("‚úÖ Coach affect√© avec succ√®s !");
    }



    // ‚úÖ Affecter un docteur √† une √©quipe
    @PutMapping("/{teamId}/setDoctor")
    public ResponseEntity<?> setDoctorForTeam(@PathVariable int teamId, @RequestBody Map<String, Integer> payload) {
        if (!payload.containsKey("doctorId")) {
            log.warn("‚ùå Requ√™te invalide : `doctorId` est manquant !");
            return ResponseEntity.badRequest().body("‚ùå Erreur : `doctorId` est requis !");
        }

        int doctorId = payload.get("doctorId");
        log.info("üì° Tentative d'affectation du docteur ID={} √† l'√©quipe ID={}", doctorId, teamId);

        Optional<Team> teamOpt = teamService.getTeamById(teamId);
        Optional<User> doctorOpt = userRepository.findById(doctorId);

        if (teamOpt.isEmpty()) {
            log.warn("‚ùå √âquipe ID={} introuvable", teamId);
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("‚ùå √âquipe introuvable !");
        }
        if (doctorOpt.isEmpty()) {
            log.warn("‚ùå Docteur ID={} introuvable", doctorId);
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("‚ùå Docteur introuvable !");
        }

        Team team = teamOpt.get();
        User doctor = doctorOpt.get();

        if (!Role.DOCTOR.equals(doctor.getRole())) {
            log.warn("‚ùå L'utilisateur ID={} n'est pas un docteur", doctorId);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("‚ö†Ô∏è L'utilisateur s√©lectionn√© n'est pas un docteur !");
        }

        // üö® V√©rification si le docteur est d√©j√† affect√© √† une autre √©quipe
        List<Team> allTeams = teamService.getAllTeams();
        for (Team t : allTeams) {
            if (t.getDoctor() != null && t.getDoctor().getId() == doctorId && t.getTeamId() != teamId) {
                log.warn("‚ö†Ô∏è Docteur ID={} est d√©j√† affect√© √† l'√©quipe ID={}", doctorId, t.getTeamId());
                return ResponseEntity.status(HttpStatus.CONFLICT).body("‚ö†Ô∏è Ce docteur est d√©j√† affect√© √† une autre √©quipe !");
            }
        }

        // ‚úÖ Affectation du docteur
        team.setDoctor(doctor);
        teamService.updateTeam(teamId, team);
        log.info("‚úÖ Docteur ID={} affect√© avec succ√®s √† l'√©quipe ID={}", doctorId, teamId);

        return ResponseEntity.ok(team);
    }



    ///////////

    ///////////
    @PutMapping("/{teamId}/removePlayer")
    public ResponseEntity<?> removePlayerFromTeam(@PathVariable int teamId, @RequestBody Map<String, Integer> payload) {
        int playerId = payload.getOrDefault("playerId", -1);
        if (playerId == -1) {
            return ResponseEntity.badRequest().body(Map.of("error", "‚ùå `playerId` est requis !"));
        }

        Optional<Team> teamOpt = teamService.getTeamById(teamId);
        Optional<User> playerOpt = userRepository.findById(playerId);

        if (teamOpt.isEmpty() || playerOpt.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of("error", "‚ùå √âquipe ou joueur introuvable !"));
        }

        Team team = teamOpt.get();
        User player = playerOpt.get();

        if (!team.getPlayers().contains(player)) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(Map.of("error", "‚ö†Ô∏è Ce joueur n'appartient pas √† cette √©quipe !"));
        }

        // üî• Supprimer le joueur de l'√©quipe
        player.setTeam(null);
        userRepository.save(player);
        team.getPlayers().remove(player);
        teamService.updateTeam(teamId, team);

        log.info("üóë Joueur ID={} retir√© de l'√©quipe ID={}", playerId, teamId);

        // ‚úÖ Retourner un objet JSON valide
        return ResponseEntity.ok(Map.of(
                "message", "‚úÖ Joueur retir√© avec succ√®s.",
                "team", team
        ));
    }


    ///
    // ‚úÖ Supprimer une √©quipe
    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteTeam(@PathVariable int id) {
        log.info("üîç Requ√™te DELETE re√ßue pour supprimer l'√©quipe ID={}", id);

        boolean deleted = teamService.deleteTeam(id);
        if (deleted) {
            log.info("‚úÖ √âquipe ID={} supprim√©e avec succ√®s.", id);
            return ResponseEntity.ok(Map.of("message", "‚úÖ √âquipe supprim√©e avec succ√®s."));
        } else {
            log.warn("‚ùå √âchec de suppression, √©quipe ID={} introuvable.", id);
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of("error", "‚ùå √âquipe introuvable."));
        }
    }


}


