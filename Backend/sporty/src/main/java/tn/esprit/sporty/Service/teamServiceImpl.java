package tn.esprit.sporty.Service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j; // ‚úÖ Ajout pour les logs
import org.springframework.stereotype.Service;
import tn.esprit.sporty.Entity.Team;
import tn.esprit.sporty.Entity.User;
import tn.esprit.sporty.Repository.TeamRepository;
import tn.esprit.sporty.Repository.UserRepository;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j // ‚úÖ Permet d'utiliser log.info() pour le debug
public class teamServiceImpl implements IteamService {

    private final TeamRepository teamRepository;
    private final UserRepository userRepository;

    public List<Team> getAllTeams() {
        List<Team> teams = teamRepository.findAll();

        // üö® Charger uniquement les donn√©es n√©cessaires pour √©viter la boucle infinie
        teams.forEach(team -> {
            team.setPlayers(null); // Ne pas inclure la liste compl√®te des joueurs
        });

        return teams;
    }


    @Override
    public Optional<Team> getTeamById(int id) {
        log.info("üîé Recherche de l'√©quipe ID={}", id);
        return teamRepository.findById(id);
    }

    @Override
    public Team createTeam(Team team) {
        log.info("‚úÖ Cr√©ation d'une √©quipe : {}", team.getTeamName());

        if (team.getPlayers() != null && !team.getPlayers().isEmpty()) {
            List<Integer> playerIds = team.getPlayers().stream()
                    .map(User::getId)
                    .collect(Collectors.toList());

            List<User> players = userRepository.findAllById(playerIds);
            team.setPlayers(players);
        }

        return teamRepository.save(team);
    }

    @Override
    public Team updateTeam(int id, Team teamDetails) {
        return teamRepository.findById(id)
                .map(existingTeam -> {
                    log.info("üîÑ Mise √† jour de l'√©quipe ID={}", id);

                    if (teamDetails.getTeamName() != null) existingTeam.setTeamName(teamDetails.getTeamName());
                    if (teamDetails.getSubgroups() != null) existingTeam.setSubgroups(teamDetails.getSubgroups());
                    if (teamDetails.getPlayers() != null) existingTeam.setPlayers(teamDetails.getPlayers());
                    if (teamDetails.getCoach() != null) existingTeam.setCoach(teamDetails.getCoach());
                    if (teamDetails.getDoctor() != null) existingTeam.setDoctor(teamDetails.getDoctor());

                    return teamRepository.save(existingTeam);
                }).orElse(null);
    }

    @Override
    public boolean deleteTeam(int id) {
        try {
            Optional<Team> teamOpt = teamRepository.findById(id);

            if (teamOpt.isEmpty()) {
                log.warn("‚ùå √âchec de suppression, √©quipe ID={} introuvable", id);
                return false;
            }

            Team team = teamOpt.get();

            // üî• Dissocier les joueurs avant suppression
            for (User player : team.getPlayers()) {
                player.setTeam(null);
                userRepository.save(player);
            }
            team.getPlayers().clear();

            // üî• V√©rifier et retirer le coach
            if (team.getCoach() != null) {
                team.setCoach(null);
            }

            // üî• V√©rifier et retirer le docteur
            if (team.getDoctor() != null) {
                team.setDoctor(null);
            }

            // üî• Sauvegarder les modifications avant suppression
            teamRepository.save(team);

            // üî• Supprimer l'√©quipe apr√®s nettoyage
            log.info("üóë Suppression de l'√©quipe ID={}", id);
            teamRepository.deleteById(id);
            return true;

        } catch (Exception e) {
            log.error("‚ùå ERREUR lors de la suppression de l'√©quipe ID={} : {}", id, e.getMessage(), e);
            return false;
        }
    }



    // ‚úÖ M√©thode pour ajouter un joueur √† une √©quipe
    public Team addPlayerToTeam(int teamId, int playerId) {
        Optional<Team> teamOpt = teamRepository.findById(teamId);
        Optional<User> playerOpt = userRepository.findById(playerId);

        if (teamOpt.isEmpty() || playerOpt.isEmpty()) {
            log.error("‚ùå √âchec : √âquipe ID={} ou Joueur ID={} introuvable", teamId, playerId);
            return null;
        }

        Team team = teamOpt.get();
        User player = playerOpt.get();

        if (team.getPlayers().contains(player)) {
            log.warn("‚ö†Ô∏è Joueur ID={} est d√©j√† dans l'√©quipe ID={}", playerId, teamId);
            return null;
        }

        team.getPlayers().add(player);
        return teamRepository.save(team);
    }

    // ‚úÖ M√©thode pour affecter un coach √† une √©quipe
    public Team assignCoachToTeam(int teamId, int coachId) {
        Optional<Team> teamOpt = teamRepository.findById(teamId);
        Optional<User> coachOpt = userRepository.findById(coachId);

        if (teamOpt.isEmpty() || coachOpt.isEmpty()) {
            log.error("‚ùå √âchec : √âquipe ID={} ou Coach ID={} introuvable", teamId, coachId);
            return null;
        }

        Team team = teamOpt.get();
        User coach = coachOpt.get();

        if (!coach.getRole().equals("COACH")) {
            log.error("‚ùå L'utilisateur ID={} n'est pas un coach", coachId);
            return null;
        }

        team.setCoach(coach);
        return teamRepository.save(team);
    }

    // ‚úÖ M√©thode pour affecter un docteur √† une √©quipe
    public Team assignDoctorToTeam(int teamId, int doctorId) {
        Optional<Team> teamOpt = teamRepository.findById(teamId);
        Optional<User> doctorOpt = userRepository.findById(doctorId);

        if (teamOpt.isEmpty() || doctorOpt.isEmpty()) {
            log.error("‚ùå √âchec : √âquipe ID={} ou Docteur ID={} introuvable", teamId, doctorId);
            return null;
        }

        Team team = teamOpt.get();
        User doctor = doctorOpt.get();

        if (!doctor.getRole().equals("DOCTOR")) {
            log.error("‚ùå L'utilisateur ID={} n'est pas un docteur", doctorId);
            return null;
        }

        team.setDoctor(doctor);
        return teamRepository.save(team);
    }

    public boolean removeDoctorFromTeam(int teamId) {
        Optional<Team> teamOpt = teamRepository.findById(teamId);
        if (teamOpt.isEmpty()) {
            log.warn("‚ùå Impossible de supprimer : √âquipe ID={} introuvable", teamId);
            return false;
        }

        Team team = teamOpt.get();
        if (team.getDoctor() == null) {
            log.warn("‚ö†Ô∏è Aucun docteur √† supprimer pour l'√©quipe ID={}", teamId);
            return false;
        }

        team.setDoctor(null);
        teamRepository.save(team);
        log.info("üóë Docteur retir√© de l'√©quipe ID={}", teamId);
        return true;
    }

    public boolean removeCoachFromTeam(int teamId) {
        Optional<Team> teamOpt = teamRepository.findById(teamId);
        if (teamOpt.isEmpty()) {
            log.warn("‚ùå Impossible de supprimer : √âquipe ID={} introuvable", teamId);
            return false;
        }

        Team team = teamOpt.get();
        if (team.getCoach() == null) {
            log.warn("‚ö†Ô∏è Aucun coach √† supprimer pour l'√©quipe ID={}", teamId);
            return false;
        }

        team.setCoach(null);
        teamRepository.save(team);
        log.info("üóë Coach retir√© de l'√©quipe ID={}", teamId);
        return true;
    }

    // ‚úÖ Retirer un joueur d'une √©quipe
    public boolean removePlayerFromTeam(int teamId, int playerId) {
        Optional<Team> teamOpt = teamRepository.findById(teamId);
        Optional<User> playerOpt = userRepository.findById(playerId);

        if (teamOpt.isEmpty() || playerOpt.isEmpty()) {
            log.warn("‚ùå Impossible de supprimer : √âquipe ID={} ou Joueur ID={} introuvable", teamId, playerId);
            return false;
        }

        Team team = teamOpt.get();
        User player = playerOpt.get();

        if (!team.getPlayers().contains(player)) {
            log.warn("‚ö†Ô∏è Le joueur ID={} n'est pas dans l'√©quipe ID={}", playerId, teamId);
            return false;
        }

        player.setTeam(null);
        userRepository.save(player);
        team.getPlayers().remove(player);
        teamRepository.save(team);

        log.info("üóë Joueur ID={} retir√© de l'√©quipe ID={}", playerId, teamId);
        return true;
    }

}
