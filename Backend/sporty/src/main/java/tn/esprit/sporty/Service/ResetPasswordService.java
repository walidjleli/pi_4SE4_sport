package tn.esprit.sporty.Service;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import tn.esprit.sporty.Entity.User;
import tn.esprit.sporty.Repository.UserRepository;

import java.util.Optional;
import java.util.UUID;

@Service
public class ResetPasswordService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private EmailServiceImpl emailServiceImpl;

    private final BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder(); // ‚úÖ Ajout de l'encodeur

    // ‚úÖ G√©n√©rer et envoyer un token de r√©initialisation
    public boolean sendResetPasswordToken(String email) {
        User user = userRepository.findByEmail(email);
        if (user == null) {
            System.out.println("‚ùå Aucun utilisateur trouv√© avec cet email !");
            return false;
        }

        // ‚úÖ G√©n√©rer un token unique et stocker en base
        String resetToken = UUID.randomUUID().toString();
        user.setResetToken(resetToken);
        userRepository.save(user);

        // ‚úÖ Envoyer l‚Äôemail avec le lien de r√©initialisation
        String subject = "üîë R√©initialisation de votre mot de passe";
        String message = "Bonjour " + user.getFirstName() + ",\n\n"
                + "Veuillez cliquer sur le lien ci-dessous pour r√©initialiser votre mot de passe :\n"
                + "üîó http://localhost:4200/reset-password?token=" + resetToken + "\n\n"
                + "Cordialement,\nVotre √âquipe";

        emailServiceImpl.sendSimpleMessage(email, subject, message);
        System.out.println("‚úÖ Email de r√©initialisation envoy√© √† " + email);
        return true;
    }

    // ‚úÖ V√©rifier et r√©initialiser le mot de passe
    public boolean resetPassword(String token, String newPassword) {
        System.out.println("üîç V√©rification du token re√ßu : " + token);

        Optional<User> userOpt = userRepository.findByResetToken(token);
        if (userOpt.isEmpty()) {
            System.out.println("‚ùå Token invalide ou expir√© !");
            return false;
        }

        User user = userOpt.get();

        // ‚úÖ Hash du mot de passe avant enregistrement
        String hashedPassword = passwordEncoder.encode(newPassword);
        user.setPassword(hashedPassword);
        user.setResetToken(null);  // ‚úÖ Suppression du token apr√®s usage
        userRepository.save(user);

        System.out.println("‚úÖ Mot de passe r√©initialis√© avec succ√®s !");
        return true;
    }
}
